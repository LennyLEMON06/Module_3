# Generated by Django 5.1.6 on 2025-03-03 22:37

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryRoom',
            fields=[
                ('idcategory', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Категории')),
                ('categoryname', models.CharField(max_length=255, verbose_name='Название Категории')),
            ],
            options={
                'verbose_name': 'Категория Комнаты',
                'verbose_name_plural': 'Категории Комнат',
            },
        ),
        migrations.CreateModel(
            name='ElementRoom',
            fields=[
                ('idelement', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Элемента')),
                ('elementname', models.CharField(max_length=255, verbose_name='Название Элемента')),
            ],
            options={
                'verbose_name': 'Элемент Комнаты',
                'verbose_name_plural': 'Элементы Комнаты',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('idgender', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Пола')),
                ('gendername', models.CharField(max_length=255, verbose_name='Пол')),
            ],
            options={
                'verbose_name': 'Пол',
                'verbose_name_plural': 'Полы',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('idrole', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Роли')),
                ('rolename', models.CharField(max_length=255, verbose_name='Название Роли')),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('idservice', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Услуги')),
                ('servicename', models.CharField(max_length=255, verbose_name='Название Услуги')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Стоимость')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='StatusRoom',
            fields=[
                ('idstatus', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Статуса')),
                ('statusname', models.CharField(max_length=255, verbose_name='Название Статуса')),
            ],
            options={
                'verbose_name': 'Статус Комнаты',
                'verbose_name_plural': 'Статусы Комнат',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('idroom', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Комнаты')),
                ('floor', models.IntegerField(verbose_name='Этаж')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Стоимость')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Описание')),
                ('nameroom', models.CharField(max_length=255, verbose_name='Название Комнаты')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.categoryroom', verbose_name='Категория')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='login.statusroom', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'Комната',
                'verbose_name_plural': 'Комнаты',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('patronymic', models.CharField(blank=True, max_length=255, verbose_name='Отчество')),
                ('login', models.CharField(max_length=255, verbose_name='Логин')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата Рождения')),
                ('phone_number', models.CharField(blank=True, max_length=255, verbose_name='Номер Телефона')),
                ('serial_passport', models.CharField(blank=True, max_length=255, verbose_name='Серия Паспорта')),
                ('number_passport', models.CharField(blank=True, max_length=255, verbose_name='Номер Паспорта')),
                ('block', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('first_auth', models.BooleanField(default=False, verbose_name='Первая Аутентификация')),
                ('address', models.CharField(blank=True, max_length=255, verbose_name='Адрес')),
                ('gender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='login.gender', verbose_name='Пол')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='login_user_groups', related_query_name='login_user', to='auth.group', verbose_name='groups')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='login.role', verbose_name='Роль')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='login_user_permissions', related_query_name='login_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('idorder', models.AutoField(primary_key=True, serialize=False, verbose_name='ID Заказа')),
                ('datestart', models.DateField(verbose_name='Дата начала')),
                ('dateend', models.DateField(verbose_name='Дата окончания')),
                ('sum', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Сумма')),
                ('iscost', models.BooleanField(default=False, verbose_name='Учитывать Стоимость')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.room', verbose_name='Комната')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.user', verbose_name='Клиент')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.CreateModel(
            name='EquipmentRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.elementroom')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.room')),
            ],
            options={
                'verbose_name': 'Оснащение Комнаты',
                'verbose_name_plural': 'Оснащение Комнат',
                'unique_together': {('room', 'element')},
            },
        ),
        migrations.CreateModel(
            name='OrderService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.order')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='login.service')),
            ],
            options={
                'verbose_name': 'Услуга Заказа',
                'verbose_name_plural': 'Услуги Заказа',
                'unique_together': {('order', 'service')},
            },
        ),
    ]
